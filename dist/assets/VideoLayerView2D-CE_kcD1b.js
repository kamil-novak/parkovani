import{gy as j,gl as k,gn as B,ao as x,go as X,gm as J,ce as g,c5 as K,gz as $,be as R,aF as Q,av as w,eE as Z,eB as U,eD as q,au as F,an as V,ak as C,al as M,am as ee}from"./index-DZ6QMKrb.js";import{h as te}from"./GraphicsLayer-Bd36fMm5.js";import{i as W}from"./TelemetryDisplay-s70hkWFl.js";import{f as ie}from"./OverlayContainer-BiXtZnoC.js";import{s as re}from"./Container-uRR2QFSY.js";import{a as se,f as oe,y as ne}from"./LayerView-annbnlhR.js";import{c as z}from"./Program-CJ_ccRty.js";import{D as ae,F as H,E as le}from"./enums-BlUEVwJR.js";import{e as he,c as me}from"./Texture-BH7n7v-k.js";import{o as pe}from"./ProgramTemplate-Bg7BwGms.js";import{t as ye}from"./GraphicContainer-DUJt_KaT.js";import{V as ce}from"./GraphicsView2D-BNliU9ZG.js";import"./vec3f32-nZdmKIgz.js";import"./WGLContainer-DiCLfU30.js";import"./definitions-Y_v3njP4.js";import"./LabelMetric-DGOCCVpi.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./BoundingBox-BhxfYEGV.js";import"./StyleDefinition-DTzXldZb.js";import"./config-MDUrh2eL.js";import"./earcut-G0Thv-cX.js";import"./featureConversionUtils-S0nbavqK.js";import"./OptimizedFeature-7juV2tZm.js";import"./OptimizedGeometry-vU5jWBvU.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./highlightReasons-PEve9bjd.js";import"./AGraphicContainer-Bg2YSy4i.js";import"./TechniqueInstance-Bn2UDUhf.js";import"./UpdateTracking2D-BYsDpuVw.js";import"./BindType-BmZEZMMh.js";import"./Util-y4cw9NnN.js";import"./TileContainer-DcEz71cJ.js";import"./FeatureCommandQueue-jKgpYdPH.js";import"./CIMSymbolHelper-CXc9e9NO.js";import"./BidiEngine-BwB1Df7c.js";import"./fontUtils-DVQeo2Pk.js";import"./GeometryUtils-CjTyvULX.js";import"./Rect-CUzevAry.js";import"./constants-D5zmR9t2.js";import"./AttributeStore-CE5oHvvx.js";import"./TimeOnly-DoUKJlUH.js";import"./timeSupport-6JtgLfI9.js";import"./json-Wa8cmqdu.js";import"./normalizeUtilsSync-CGJfWwON.js";const b=2;class de extends re{constructor(e){super(),this.element=e,this._handles=new j,this.isWrapAround=!1,this.perspectiveTransform=k(),this.wrapAroundShift=0,this.clipGeometry=null,this._handles.add(B(()=>this.element,()=>{const t=this.element;this.ready(),t&&this._handles.add(X(t,"play",()=>this.requestRender()))},x))}getMesh(e){throw new Error("Method not implemented.")}destroy(){this._handles.destroy(),this.texture=J(this.texture),this._vao&&(this._vao.dispose(),this._vao=null),this._vbo&&(this._vbo.dispose(),this._vbo=null),this.texture&&(this.texture.dispose(),this.texture=null)}get textureSize(){if(!this.texture)return[1,1];const e=this.texture.descriptor;return[e.width,e.height]}get dvsMat3(){return this.parent.dvsMat3}beforeRender(e){const t=this.element;if(t==null)return;const{context:r}=e,{videoWidth:i,videoHeight:o}=t;if(i!==0&&o!==0){if(this.texture)t.paused||this.texture.setData(t);else{const n=new he;n.wrapMode=ae.CLAMP_TO_EDGE,n.preMultiplyAlpha=!0,n.width=i,n.height=o,this.texture=new me(r,n,t)}t.paused||(this.texture.generateMipmap(),this.requestRender()),super.beforeRender(e)}}_createTransforms(){return null}updateDrawCoords(e,t,r,i){const o=this.element,n=this._getFrameInfo();if(!o||!n)return;this._initializeData(e,n,r);const{controlPoints:l,horizon:h}=n,m=Math.sqrt(l.length),c=m,{x:a,y:p}=e,u=this._vertices,T=l[0],G=l[m-1],N=l[(c-1)*m],Y=l[(c-1)*m+m-1],O=g(h?h[0].mapPoint:T.mapPoint,r),P=g(h?h[1].mapPoint:G.mapPoint,r),f=g(N.mapPoint,r),D=g(Y.mapPoint,r);this.clipGeometry=h?new se({geometry:K.fromJSON({rings:[[[f.x,f.y],[D.x,D.y],[P.x,P.y],[O.x,O.y],[f.x,f.y]]],spatialReference:r})}):null;for(let y=0;y<l.length;y++){const L=l[y],{sourcePoint:S,mapPoint:A}=L;if(S==null||A==null)continue;const v=g(A,r);u[y*b+0]=v.x-a,u[y*b+1]=v.y-p}let E=t;if(i){const y=Math.min(O.x,P.x,f.x,D.x),L=Math.max(O.x,P.x,f.x,D.x),{worldWidth:S,xBounds:A}=i,[v,I]=A;y<v&&L>v?E=S:L>I&&y<I&&(E=-S)}this.wrapAroundShift=E,this.isWrapAround=E!==0}getVAO(e,t,r){if(this._vertices==null)return null;const i=this._vertices;if(this._vao)this._vbo.setData(i);else{this._vbo=z.createVertex(e,H.DYNAMIC_DRAW,i);const o=z.createVertex(e,H.STATIC_DRAW,this._texCoords);this._ibo=z.createIndex(e,H.DYNAMIC_DRAW,this._indices),this._vao=new pe(e,r,t,{geometry:this._vbo,tex:o},this._ibo)}return this._vao}draw(e){e.drawElements(le.TRIANGLE_STRIP,this._indices.length,e.gl.UNSIGNED_SHORT,0)}_initializeData(e,t,r){if(this._vertices!=null&&this._indices!=null)return;const{controlPoints:i}=t,o=Math.sqrt(i.length),n=o,l=new Float32Array(b*i.length),h=new Uint16Array(2*i.length);for(let a=0;a<i.length;a++){const p=i[a],{sourcePoint:u,mapPoint:T}=p;if(u==null||T==null)continue;const G=g(T,r);l[a*b+0]=G.x-e.x,l[a*b+1]=G.y-e.y,h[2*a+0]=u.x,h[2*a+1]=u.y}const m=new Uint16Array(n*o+(n-2)*(o+2));let c=0;for(let a=0;a<n;a++){for(let p=0;p<o;p++)m[c++]=a*o+p,m[c++]=(a+1)*o+p;a<n-2&&(m[c++]=(a+1)*o+(o-1),m[c++]=(a+1)*o)}this._vertices=l,this._texCoords=h,this._indices=m}_getFrameInfo(){if(!this.groundControlPoints)return null;const e=this._getFrameControlPoints(),t=this.frameHorizonPoints;let r=null;if(t){const i=t.startX,o=t.startY,n=t.endX,l=t.endY;r=[{sourcePoint:$(i,o),mapPoint:new R(t.startLongitude,t.startLatitude)},{sourcePoint:$(n,l),mapPoint:new R(t.endLongitude,t.endLatitude)}]}return{controlPoints:e,horizon:r}}_getFrameControlPoints(){const e=this.groundControlPoints,t=e==null?void 0:e.length;if(!t)return[];const r=new Array(t);for(let i=0;i<t;i++){const{x:o,y:n,lat:l,lon:h}=e[i];r[i]={sourcePoint:$(o,-n),mapPoint:new R(h,l)}}return r}}const _=new Q([255,127,0]);let d=class extends oe(ne){constructor(){super(...arguments),this._graphicsLayer=new te,this._frameOutlineGraphic=new w({symbol:new Z({outline:{type:"simple-line",color:_}})}),this._sensorTrailGraphic=new w({symbol:new U({color:_})}),this._lineOfSightGraphic=new w({symbol:new U({color:_})}),this._sensorLocationGraphic=new w({symbol:new q({color:_})}),this._frameCenterGraphic=new w({symbol:new q({color:_})}),this._overlayContainer=null,this.layer=null,this.symbolColor=_,this.visibleTelemetryElements=null}destroy(){this._graphicsLayer=F(this._graphicsLayer)}initialize(){var s,e,t,r,i;this.addHandles(V(()=>this.symbolColor,()=>{this._frameOutlineGraphic.symbol.outline.color=this.symbolColor,this._sensorTrailGraphic.symbol.color=this.symbolColor,this._lineOfSightGraphic.symbol.color=this.symbolColor,this._sensorLocationGraphic.symbol.color=this.symbolColor,this._frameCenterGraphic.symbol.color=this.symbolColor},x)),this._graphicsLayer.graphics.addMany([this._frameOutlineGraphic,this._sensorTrailGraphic,this._lineOfSightGraphic,this._sensorLocationGraphic,this._frameCenterGraphic]),this.visibleTelemetryElements=new W({frameCenter:((s=this.layer.telemetryDisplay)==null?void 0:s.frameCenter)??!0,frameOutline:((e=this.layer.telemetryDisplay)==null?void 0:e.frameOutline)??!0,lineOfSight:((t=this.layer.telemetryDisplay)==null?void 0:t.lineOfSight)??!0,sensorLocation:((r=this.layer.telemetryDisplay)==null?void 0:r.sensorLocation)??!0,sensorTrail:((i=this.layer.telemetryDisplay)==null?void 0:i.sensorTrail)??!0})}attach(){this._overlayContainer=new ie,this.container.addChild(this._overlayContainer),this._addOverlayMultipoint(),this.graphicsView=new ce({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this._graphicsLayer.graphics,container:new ye(this.view.featuresTilingScheme)}),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this._graphicsLayer.on("graphic-update",this.graphicsView.graphicUpdateHandler)),this.addAttachHandles([V(()=>{var s,e,t,r,i;return[(s=this.layer.telemetryDisplay)==null?void 0:s.frameCenter,(e=this.layer.telemetryDisplay)==null?void 0:e.frameOutline,(t=this.layer.telemetryDisplay)==null?void 0:t.sensorLocation,(r=this.layer.telemetryDisplay)==null?void 0:r.sensorTrail,(i=this.layer.telemetryDisplay)==null?void 0:i.lineOfSight]},()=>this._updateVisibleTelemetryElements(),x),V(()=>{var s,e,t,r,i;return[this.layer.telemetry,(s=this.visibleTelemetryElements)==null?void 0:s.frameCenter,(e=this.visibleTelemetryElements)==null?void 0:e.frameOutline,(t=this.visibleTelemetryElements)==null?void 0:t.sensorLocation,(r=this.visibleTelemetryElements)==null?void 0:r.sensorTrail,(i=this.visibleTelemetryElements)==null?void 0:i.lineOfSight]},()=>this._updateGraphicGeometries(),x)])}detach(){this._overlayContainer.removeAllChildren(),this.container.removeAllChildren(),this.graphicsView=F(this.graphicsView)}supportsSpatialReference(s){return!0}moveEnd(){}viewChange(){this.graphicsView.viewChange()}update(s){this.graphicsView.processUpdate(s)}isUpdating(){return!this.graphicsView||this.graphicsView.updating}_updateVisibleTelemetryElements(){this.visibleTelemetryElements&&this.layer.telemetryDisplay&&(this.visibleTelemetryElements.frameCenter=this.layer.telemetryDisplay.frameCenter,this.visibleTelemetryElements.frameOutline=this.layer.telemetryDisplay.frameOutline,this.visibleTelemetryElements.lineOfSight=this.layer.telemetryDisplay.lineOfSight,this.visibleTelemetryElements.sensorLocation=this.layer.telemetryDisplay.sensorLocation,this.visibleTelemetryElements.sensorTrail=this.layer.telemetryDisplay.sensorTrail)}_updateGraphicGeometries(){const{telemetry:s}=this.layer,{visibleTelemetryElements:e}=this;s&&e&&(e.frameOutline&&s.frameOutline?this._frameOutlineGraphic.geometry=this.layer.telemetry.frameOutline:this._frameOutlineGraphic.geometry=null,e.sensorTrail&&s.sensorTrail?this._sensorTrailGraphic.geometry=this.layer.telemetry.sensorTrail:this._sensorTrailGraphic.geometry=null,e.lineOfSight&&s.lineOfSight?this._lineOfSightGraphic.geometry=this.layer.telemetry.lineOfSight:this._lineOfSightGraphic.geometry=null,e.sensorLocation&&s.sensorLocation?this._sensorLocationGraphic.geometry=this.layer.telemetry.sensorLocation:this._sensorLocationGraphic.geometry=null,e.frameCenter&&s.frameCenter?this._frameCenterGraphic.geometry=this.layer.telemetry.frameCenter:this._frameCenterGraphic.geometry=null)}async _addOverlayMultipoint(){if(!this.layer.videoElement)return;const s=new de(this.layer.videoElement);this.addAttachHandles([V(()=>[this.layer.frameHorizonPoints,this.layer.groundControlPoints],()=>{s.frameHorizonPoints=this.layer.frameHorizonPoints,s.groundControlPoints=this.layer.groundControlPoints},x)]),this._overlayContainer.addChild(s),this.view.stage.requestRender()}};C([M()],d.prototype,"graphicsView",void 0),C([M()],d.prototype,"layer",void 0),C([M()],d.prototype,"symbolColor",void 0),C([M({type:W})],d.prototype,"visibleTelemetryElements",void 0),d=C([ee("esri.views.2d.layers.VideoLayerView2D")],d);const ot=d;export{ot as default};
