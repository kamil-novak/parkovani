import{ak as p,s as m,aq as s}from"./index-UnLLvqnM.js";import{p as a}from"./MeshVertexAttributes-BigW9-DT.js";import{B as n}from"./vertexSpaceConversion-n6UHrq2I.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-zdU_ZBoi.js";import"./computeTranslationToOriginAndRotation-DpfYzzrb.js";import"./projectPointToVector-D8SWOZkj.js";import"./meshVertexSpaceUtils-DYyjPd3I.js";import"./MeshLocalVertexSpace-Dkg12vjQ.js";import"./vec3-DZkHzxXo.js";import"./BufferView-DMikzCIA.js";import"./vec4-Boekz-b3.js";async function E(t,o,r){await Promise.resolve(),p(r);const e=n(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{E as convertMeshVertexSpace};
