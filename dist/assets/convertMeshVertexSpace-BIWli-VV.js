import{ag as p,s as m,al as s}from"./index-Drt46XzA.js";import{p as a}from"./MeshVertexAttributes-mucXvad9.js";import{B as n}from"./vertexSpaceConversion-Du7DT4im.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-2OinnsTc.js";import"./computeTranslationToOriginAndRotation-CCzMFvQn.js";import"./projectPointToVector-Bp4JnL7n.js";import"./meshVertexSpaceUtils-DsF25cLL.js";import"./MeshLocalVertexSpace-W3BxGE7x.js";import"./vec3-6XHCeI3u.js";import"./BufferView-DzAwwvSs.js";import"./vec4-DOohNC4e.js";async function E(t,o,r){await Promise.resolve(),p(r);const e=n(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{E as convertMeshVertexSpace};
