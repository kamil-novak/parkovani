import{ag as p,s as m,al as s}from"./index-CL4IMKCD.js";import{p as a}from"./MeshVertexAttributes-mYgZx_h8.js";import{B as n}from"./vertexSpaceConversion-C6m3Sk5_.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-CCn9bKGa.js";import"./computeTranslationToOriginAndRotation-BfzMnTBT.js";import"./projectPointToVector-DvtEAYL3.js";import"./meshVertexSpaceUtils-DnQUNOyO.js";import"./MeshLocalVertexSpace-sCxC6L4a.js";import"./vec3-TTwiLJlz.js";import"./BufferView-fuEwQAdB.js";import"./vec4-C5vCL7Do.js";async function E(t,o,r){await Promise.resolve(),p(r);const e=n(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{E as convertMeshVertexSpace};
