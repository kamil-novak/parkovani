import{ak as p,s as m,aq as s}from"./index-CT2W65Mv.js";import{p as a}from"./MeshVertexAttributes-QhuclkeG.js";import{B as n}from"./vertexSpaceConversion-BxCh-Uoy.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-DfkwGKCt.js";import"./computeTranslationToOriginAndRotation-BhbWkkV6.js";import"./projectPointToVector-DYWpGHgC.js";import"./meshVertexSpaceUtils-BGt6a-3D.js";import"./MeshLocalVertexSpace-DMMojHRF.js";import"./vec3-Cm1I_8tI.js";import"./BufferView-DDz6XOyc.js";import"./vec4-Zp20Gt0G.js";async function E(t,o,r){await Promise.resolve(),p(r);const e=n(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{E as convertMeshVertexSpace};
