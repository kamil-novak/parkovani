import{cY as h,$ as y,aJ as S,ae as g,gt as l,ai as N}from"./index-CFrkLCgo.js";import{$ as E}from"./Mesh-DxLQe9s3.js";import{i as D,a as M}from"./External-xSO4GK9K.js";import{s as F}from"./infoFor3D-CxdEiWhp.js";import{n as T,i as w}from"./meshFeatureAttributes-DMV2xTlZ.js";import"./axisAngleDegrees-C0SrkRIZ.js";import"./quat-WynHyFP2.js";import"./MeshComponent-CmkXTann.js";import"./meshProperties-C4iW0Ukm.js";import"./MeshLocalVertexSpace-CbW_ZvN-.js";import"./MeshTransform-BscE4zrb.js";import"./MeshVertexAttributes-B49XPfEs.js";import"./meshVertexSpaceUtils-CAU0CeP1.js";import"./triangulationUtils-CNK8Kvhr.js";import"./earcut-Lltz9D9k.js";import"./Indices-7rPpKO8A.js";import"./deduplicate-CV2XgjHR.js";import"./vertexSpaceConversion-DHPjgy-m.js";import"./spatialReferenceEllipsoidUtils-D3KixFd_.js";import"./computeTranslationToOriginAndRotation-BPoOYux1.js";import"./vec3-CINSIZy9.js";import"./BufferView-D5jmtX62.js";import"./vec4-DidXxKi0.js";const I=()=>N.getLogger("esri.rest.support.meshFeatureSet");function et(t,o,e){const r=e.features;e.features=[],delete e.geometryType;const s=h.fromJSON(e);if(s.geometryType="mesh",!e.assetMaps)return s;const n=$(o,e.assetMaps),i=t.sourceSpatialReference??y.WGS84,m=e.globalIdFieldName,{outFields:a}=t,c=a!=null&&a.length>0?L(a.includes("*")?null:new Set(a)):()=>({});for(const u of r){const p=O(u,m,i,o,n);s.features.push(new S({geometry:p,attributes:c(u)}))}return s}function L(t){return({attributes:o})=>{if(!o)return{};if(!t)return o;for(const e in o)t.has(e)||delete o[e];return o}}function O(t,o,e,r,s){const n=t.attributes[o],i=s.get(n);if(i==null||!t.geometry)return null;const m=T(t.attributes,e,r.transformFieldRoles),a=g.fromJSON(t.geometry);a.spatialReference=e;const c=w(t.attributes,r.transformFieldRoles),u=e.isGeographic?"local":"georeferenced",p=b(i);return p?E.createWithExternalSource(m,p,{extent:a,transform:c,vertexSpace:u,unitConversionDisabled:!0}):E.createIncomplete(m,{extent:a,transform:c,vertexSpace:u})}var f;function $(t,o){const e=new Map;for(const r of o){const s=r.parentGlobalId;if(s==null)continue;const n=r.assetName,i=r.assetType,m=r.assetHash,a=r.assetURL,c=r.conversionStatus,u=r.seqNo,p=F(i,t.supportedFormats);if(!p){I().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${i}, but it does not list it as a supported type`);continue}const d=l(e,s,()=>({files:new Map}));l(d.files,n,()=>({name:n,type:i,mimeType:p,status:P(c),parts:[]})).parts[u]={hash:m,url:a}}return e}function b(t){const o=Array.from(t.files.values()),e=new Array;for(const r of o){if(r.status!==f.COMPLETED)return null;const s=new Array;for(const n of r.parts){if(!n)return null;s.push(new D(n.url,n.hash))}e.push(new M(r.name,r.mimeType,s))}return e}function P(t){switch(t){case"COMPLETED":case"SUBMITTED":return f.COMPLETED;case"INPROGRESS":return f.PENDING;default:return f.FAILED}}(function(t){t[t.FAILED=0]="FAILED",t[t.PENDING=1]="PENDING",t[t.COMPLETED=2]="COMPLETED"})(f||(f={}));export{$ as assetMapFromAssetMapsJSON,O as extractMesh,et as meshFeatureSetFromJSON};
