import{ak as p,s as m,aq as s}from"./index-CFrkLCgo.js";import{p as n}from"./MeshVertexAttributes-B49XPfEs.js";import{B as a}from"./vertexSpaceConversion-DHPjgy-m.js";import"./meshProperties-C4iW0Ukm.js";import"./spatialReferenceEllipsoidUtils-D3KixFd_.js";import"./computeTranslationToOriginAndRotation-BPoOYux1.js";import"./meshVertexSpaceUtils-CAU0CeP1.js";import"./MeshLocalVertexSpace-CbW_ZvN-.js";import"./vec3-CINSIZy9.js";import"./BufferView-D5jmtX62.js";import"./vec4-DidXxKi0.js";async function V(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{V as convertMeshVertexSpace};
