import{ak as p,s as m,aq as s}from"./index-CrRj_mLP.js";import{p as a}from"./MeshVertexAttributes-C8AbHe4y.js";import{B as n}from"./vertexSpaceConversion-CPOhvlYE.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-CY7bryHw.js";import"./computeTranslationToOriginAndRotation-C1C-LK-5.js";import"./projectPointToVector-B079xzOn.js";import"./meshVertexSpaceUtils-BvtzJZQJ.js";import"./MeshLocalVertexSpace-CoybIlns.js";import"./vec3-DX5me3WE.js";import"./BufferView-B8oqaSxD.js";import"./vec4-BztjW8LQ.js";async function E(t,o,r){await Promise.resolve(),p(r);const e=n(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{E as convertMeshVertexSpace};
