import{ak as p,s as m,aq as s}from"./index-CDF62Mj_.js";import{p as a}from"./MeshVertexAttributes-CiJ9ywDR.js";import{B as n}from"./vertexSpaceConversion-BprW6wWn.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-DTde1Qrs.js";import"./computeTranslationToOriginAndRotation-v8J7XTyB.js";import"./projectPointToVector-AgfCxX61.js";import"./meshVertexSpaceUtils-DaMA6a1P.js";import"./MeshLocalVertexSpace-Ck2hDh7B.js";import"./vec3-_IVDh3Pf.js";import"./BufferView-B0zc2P_g.js";import"./vec4-_BzsnVc1.js";async function E(t,o,r){await Promise.resolve(),p(r);const e=n(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{E as convertMeshVertexSpace};
