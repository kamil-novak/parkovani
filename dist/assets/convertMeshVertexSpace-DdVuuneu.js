import{ak as p,s as m,aq as s}from"./index-AP6R8_GB.js";import{p as n}from"./MeshVertexAttributes-BJIypvOA.js";import{B as a}from"./vertexSpaceConversion-BB0EaqoN.js";import"./meshProperties-C4iW0Ukm.js";import"./spatialReferenceEllipsoidUtils-BQFa3f4t.js";import"./computeTranslationToOriginAndRotation-DhMhwR71.js";import"./meshVertexSpaceUtils-BDTGoMkv.js";import"./MeshLocalVertexSpace-D3c9YNcj.js";import"./vec3-CRRVJuzx.js";import"./BufferView-BK2GRpbE.js";import"./vec4-Bzv-reP6.js";async function V(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{V as convertMeshVertexSpace};
