import{cl as w,cm as y,cn as I,co as V,cp as H,b$ as v,z as T,cf as o,cq as g,ae as q,P as n,Q as f,X as U}from"./index-D-EuQFPo.js";import"./floatRGBA-PUt72Re0.js";import"./UpdateTracking2D-C9Iuj7d6.js";import"./GeometryUtils-DBH8Ulmm.js";import"./CIMSymbolHelper-CWnH9st7.js";import"./Container-5_-9syEu.js";import"./WGLContainer-VYV_jnOO.js";import"./Program-7NGPrSAO.js";import"./LabelMetric-XHME2juw.js";import"./StyleDefinition-B-cxay13.js";import"./enums-BRzLM11V.js";import"./GridShader-DsZdelFw.js";import"./pbf-oXFO9hZI.js";import"./FeatureCommandQueue-B-cIMaDh.js";import"./PieChartMeshWriter-Btkr1woW.js";import"./renderState-BA5zADS5.js";import"./interfaces-DDtDqZYj.js";import"./testSVGPremultipliedAlpha-Cq0VSUcU.js";import{F as b}from"./GraphicsView2D-BhQjbTud.js";import"./earcut-Lltz9D9k.js";import"./vec3f32-nZdmKIgz.js";import{r as C,o as c,n as d}from"./imageUtils-6jtpt7Fv.js";import{j as Q,y as $}from"./LayerView-Cyjxgo6F.js";import{h as S}from"./HighlightGraphicContainer-CYxoo7CF.js";import{i as P}from"./RefreshableLayerView-HpfYl8Z6.js";import{_ as F,R as L}from"./MapServiceLayerViewHelper-eRgFw8Q3.js";import{r as k}from"./drapedUtils-CZLAGLBY.js";import"./BindType-BmZEZMMh.js";import"./Util-CvpqvGRq.js";import"./BidiEngine-DNnuvc1i.js";import"./fontUtils-D1Ro05qb.js";import"./OptimizedGeometry-BF8iz5FO.js";import"./Rect-CUzevAry.js";import"./BoundingBox-Dcu9C1UK.js";import"./BufferObject-CmsJpBLE.js";import"./VertexArrayObject-WGwiIclB.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./ProgramTemplate-Z9CTDoVV.js";import"./config-MDUrh2eL.js";import"./featureConversionUtils-DRwPdVeT.js";import"./OptimizedFeature-6cJ-QFG5.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./CircularArray-CujHzHWW.js";import"./AttributeStore-CPonaezj.js";import"./TimeOnly-DSTypwVQ.js";import"./timeSupport-05uVIMXl.js";import"./queryUtils-ut8DiN7G.js";import"./json-Wa8cmqdu.js";import"./constants-F8oTIn7N.js";import"./TurboLine-BtRXl8CL.js";import"./basicInterfaces-CZwQPxTp.js";import"./normalizeUtilsSync-DmhdN34l.js";import"./Bitmap-9jKoCcgK.js";import"./TileContainer-QLB1ojCk.js";import"./AGraphicContainer-nSRmneGw.js";import"./TechniqueInstance-OoBktFLk.js";import"./languageUtils-xlBB-yvm.js";import"./ImmutableArray-BPVd6ESQ.js";import"./shared-Dn8Vbp8L.js";import"./number-5Awp_RvR.js";import"./popupUtils-D_NcIMEE.js";const z=[0,0];let a=class extends P(C(Q($))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new w,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}get tilemapCache(){return"tilemapCache"in this.layer?this.layer.tilemapCache:null}update(t){var e;this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume(),(e=this._highlightView)==null||e.processUpdate(t)}attach(){const t="tileServers"in this.layer?this.layer.tileServers:null,e=this.tilemapCache;if(this._tileInfoView=new y(this.layer.tileInfo,this.layer.fullExtent,e==null?void 0:e.effectiveMinLOD,e==null?void 0:e.effectiveMaxLOD),this._fetchQueue=new I({tileInfoView:this._tileInfoView,concurrency:t&&10*t.length||10,process:(i,r)=>this.fetchTile(i,r),scheduler:this.scheduler,priority:V.MAPVIEW_FETCH_QUEUE}),this._tileStrategy=new H({cachePolicy:"keep",resampling:this.resampling,acquireTile:i=>this.acquireTile(i),releaseTile:i=>this.releaseTile(i),tileInfoView:this._tileInfoView}),F(this,this.layer)){const i=this._highlightView=new b({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new S(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new L({createFetchPopupFeaturesQueryGeometry:(r,s)=>k(r,s,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(r,s)=>{i.graphicUpdateHandler({graphic:r,property:s})},layerView:this,updatingHandles:this._updatingHandles})}this.requestUpdate(),this.addAttachHandles(this._updatingHandles.add(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){var t,e;super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),(t=this._popupHighlightHelper)==null||t.destroy(),(e=this._highlightView)==null||e.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeaturesAtLocation(t,e){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeaturesAtLocation(t,e):[]}highlight(t){return this._popupHighlightHelper?this._popupHighlightHelper.highlight(t):v()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){var e;return T((e=this.layer.tileInfo)==null?void 0:e.spatialReference,t)}async doRefresh(){if(this.attached){if(this.suspended)return this._tileStrategy.clear(),void this.requestUpdate();this._fetchQueue.reset(),this._tileStrategy.refresh(t=>this._updatingHandles.addPromise(this._enqueueTileFetch(t)))}}acquireTile(t){const e=this._bitmapView.createTile(t),i=e.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(z,e.key),i.resolution=this._tileInfoView.getTileResolution(e.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._updatingHandles.addPromise(this._enqueueTileFetch(e)),this._bitmapView.addChild(e),this.requestUpdate(),e}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",()=>t.destroy()),this.requestUpdate()}async fetchTile(t,e={}){const i=this.tilemapCache,{signal:r,resamplingLevel:s=0}=e;if(!i)try{return await this._fetchImage(t,r)}catch(h){if(!o(h)&&!this.resampling)return c(this._tileInfoView.tileInfo.size);if(s<3){const m=this._tileInfoView.getTileParentId(t.id);if(m){const u=new g(m),_=await this.fetchTile(u,{...e,resamplingLevel:s+1});return d(this._tileInfoView,_,u,t)}}throw h}const l=new g(0,0,0,0);let p;try{if(await i.fetchAvailabilityUpsample(t.level,t.row,t.col,l,{signal:r}),!this.resampling&&l.level!==t.level)return c(this._tileInfoView.tileInfo.size);p=await this._fetchImage(l,r)}catch(h){if(o(h))throw h;return c(this._tileInfoView.tileInfo.size)}return this.resampling?d(this._tileInfoView,p,l,t):p}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const e=await this._fetchQueue.push(t.key);t.bitmap.source=e,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",()=>this.requestUpdate())}catch(e){o(e)||q.getLogger(this).error(e)}this.requestUpdate()}}async _fetchImage(t,e){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:e})}};n([f()],a.prototype,"resampling",null),n([f()],a.prototype,"tilemapCache",null),a=n([U("esri.views.2d.layers.TileLayerView2D")],a);const jt=a;export{jt as default};
