import{b9 as p,s,bk as i}from"./index-DZ6QMKrb.js";import{l as n}from"./MeshVertexAttributes-D8enSHvE.js";import{M as c}from"./vertexSpaceConversion-BmaKZGSk.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-CPzJn-6t.js";import"./computeTranslationToOriginAndRotation-3rpn09MK.js";import"./meshVertexSpaceUtils-Cv219ArC.js";import"./MeshLocalVertexSpace-Bw98-EoL.js";import"./vec3-0mbT8zm-.js";import"./projection-CjsJmSr5.js";import"./DoubleArray-BcdW7gtI.js";import"./BufferView-zVAsZmYC.js";import"./vec4-C0e45ohX.js";async function S(t,r,m){await Promise.resolve(),p(m);const o=c(t,r);if(!o)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const e=t.cloneAndModifyVertexAttributes(new n({...o,uv:i(t.vertexAttributes.uv),color:i(t.vertexAttributes.color)}),r);return e.transform=null,e}export{S as convertMeshVertexSpace};
