import{a7 as r,a8 as a,ab as m,gw as g,cE as l,cB as d,ai as u,cW as c}from"./index-AP6R8_GB.js";import{a as y}from"./BitmapContainer-D6LPnvBF.js";import{j as f}from"./LayerView2D-DdRsam_o.js";import{F as x}from"./GraphicsView2D-DziOLCtA.js";import{h as w}from"./HighlightGraphicContainer-DAqcdKOh.js";import{_}from"./ExportStrategy-DfSFbJuF.js";import{y as H}from"./LayerView-iIjlCz8z.js";import{i as v}from"./timeSupport-lK7zHEcm.js";import{i as I}from"./RefreshableLayerView-MYvX6-Bo.js";import{R as $}from"./MapServiceLayerViewHelper-D_6um9Tu.js";import{r as E}from"./drapedUtils-Bsq4KdUY.js";import"./WGLContainer-D4CoA39D.js";import"./LabelMetric-BCTUqdWO.js";import"./Program-Dwag7_oQ.js";import"./BufferObject-Cxj7szPN.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./BoundingBox-D7W0kqP6.js";import"./VertexArrayObject-B_h5KIu3.js";import"./ProgramTemplate-Bzgpcp5P.js";import"./vec3f32-nZdmKIgz.js";import"./Container-DlJvzXYH.js";import"./StyleDefinition-SRqT2Ccs.js";import"./config-MDUrh2eL.js";import"./earcut-Lltz9D9k.js";import"./featureConversionUtils-BcbDZM1Q.js";import"./CIMSymbolHelper-3JWokMOR.js";import"./BidiEngine-DNnuvc1i.js";import"./fontUtils-B6svIt4y.js";import"./GeometryUtils-D-3PxIvG.js";import"./Rect-CUzevAry.js";import"./AttributeStore-IegtByE1.js";import"./centroid-DdLmOD72.js";import"./UpdateTracking2D-BKG397DR.js";import"./BindType-BmZEZMMh.js";import"./Util-BP31jdp4.js";import"./queryUtils-BfBW0g-y.js";import"./json-Wa8cmqdu.js";import"./timeSupport-C6iNAnvm.js";import"./FeatureCommandQueue-BmosnKbV.js";import"./constants-F8oTIn7N.js";import"./normalizeUtilsSync-B9pm9KJw.js";import"./AGraphicContainer-BTr2ooQY.js";import"./TechniqueInstance-WLMVCw7s.js";import"./TileContainer-Biq2-ztb.js";import"./Bitmap-B0IcgAXc.js";import"./languageUtils-BP_8Lr6c.js";import"./ImmutableArray-BPVd6ESQ.js";import"./number-B14AHuaW.js";import"./highlightUtils-CFiVp3tn.js";import"./popupUtils-Dh9Kt3jv.js";const V=t=>{let i=class extends t{initialize(){this.exportImageParameters=new g({layer:this.layer})}destroy(){this.exportImageParameters.destroy(),this.exportImageParameters=null}get floors(){var e;return((e=this.view)==null?void 0:e.floors)??null}get exportImageVersion(){var e;return(e=this.exportImageParameters)==null||e.commitProperty("version"),this.commitProperty("timeExtent"),this.commitProperty("floors"),(this._get("exportImageVersion")||0)+1}get timeExtent(){var e;return v(this.layer,(e=this.view)==null?void 0:e.timeExtent,this._get("timeExtent"))}canResume(){var e;return!!super.canResume()&&!((e=this.timeExtent)!=null&&e.isEmpty)}};return r([a()],i.prototype,"exportImageParameters",void 0),r([a({readOnly:!0})],i.prototype,"floors",null),r([a({readOnly:!0})],i.prototype,"exportImageVersion",null),r([a()],i.prototype,"layer",void 0),r([a()],i.prototype,"suspended",void 0),r([a({readOnly:!0})],i.prototype,"timeExtent",null),i=r([m("esri.views.layers.MapImageLayerView")],i),i};let s=class extends V(I(f(H))){constructor(){super(...arguments),this._highlightGraphics=new l,this._updateHash=""}fetchPopupFeaturesAtLocation(t,i){return this._popupHighlightHelper.fetchPopupFeaturesAtLocation(t,i)}update(t){const i=`${this.exportImageVersion}/${t.state.id}/${t.pixelRatio}/${t.stationary}`;this._updateHash!==i&&(this._updateHash=i,this.strategy.update(t).catch(e=>{d(e)||u.getLogger(this).error(e)}),t.stationary&&this._popupHighlightHelper.updateHighlightedFeatures(t.state.resolution)),this._highlightView.processUpdate(t)}attach(){const{imageMaxWidth:t,imageMaxHeight:i,version:e}=this.layer,o=e>=10.3,n=e>=10;this._bitmapContainer=new y,this.container.addChild(this._bitmapContainer),this._highlightView=new x({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new w(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1}),this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new $({createFetchPopupFeaturesQueryGeometry:(p,h)=>E(p,h,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(p,h)=>{this._highlightView.graphicUpdateHandler({graphic:p,property:h})},layerView:this,updatingHandles:this._updatingHandles}),this.strategy=new _({container:this._bitmapContainer,fetchSource:this.fetchImageBitmap.bind(this),requestUpdate:this.requestUpdate.bind(this),imageMaxWidth:t,imageMaxHeight:i,imageRotationSupported:o,imageNormalizationSupported:n,hidpi:!0}),this.addAttachHandles(c(()=>this.exportImageVersion,()=>this.requestUpdate())),this.requestUpdate()}detach(){this.strategy.destroy(),this.container.removeAllChildren(),this._bitmapContainer.removeAllChildren(),this._highlightView.destroy(),this._popupHighlightHelper.destroy()}viewChange(){}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){return this.layer.serviceSupportsSpatialReference(t)}async doRefresh(){this._updateHash="",this.requestUpdate()}isUpdating(){return this.strategy.updating||this.updateRequested}fetchImage(t,i,e,o){return this.layer.fetchImage(t,i,e,{timeExtent:this.timeExtent,floors:this.floors,...o})}fetchImageBitmap(t,i,e,o){return this.layer.fetchImageBitmap(t,i,e,{timeExtent:this.timeExtent,floors:this.floors,...o})}highlight(t){return this._popupHighlightHelper.highlight(t)}};r([a()],s.prototype,"strategy",void 0),r([a()],s.prototype,"updating",void 0),s=r([m("esri.views.2d.layers.MapImageLayerView2D")],s);const It=s;export{It as default};
