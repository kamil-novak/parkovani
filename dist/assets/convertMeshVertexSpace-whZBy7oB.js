import{aY as p,s,b7 as i}from"./index-BkgwewGo.js";import{l as n}from"./MeshVertexAttributes-C0DyV3ap.js";import{M as a}from"./vertexSpaceConversion-BKaK1_hV.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-CCU9XOQQ.js";import"./computeTranslationToOriginAndRotation-HVagAca8.js";import"./meshVertexSpaceUtils-DnF5DRli.js";import"./MeshLocalVertexSpace-DaA7Qz4Y.js";import"./vec3-Dyeqak7h.js";import"./projection-B5M6sdWa.js";import"./DoubleArray-9VDKuLtr.js";import"./BufferView-DqUBo4lT.js";import"./vec4-CbeV_8lx.js";async function S(t,r,m){await Promise.resolve(),p(m);const o=a(t,r);if(!o)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const e=t.cloneAndModifyVertexAttributes(new n({...o,uv:i(t.vertexAttributes.uv),color:i(t.vertexAttributes.color)}),r);return e.transform=null,e}export{S as convertMeshVertexSpace};
