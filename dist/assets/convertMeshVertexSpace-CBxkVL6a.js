import{b9 as p,s,bk as i}from"./index-DHGxLLtA.js";import{l as n}from"./MeshVertexAttributes-B65Gvi4T.js";import{M as c}from"./vertexSpaceConversion-D6gjTDjs.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-BEEyz-_H.js";import"./computeTranslationToOriginAndRotation-7EldVKaD.js";import"./meshVertexSpaceUtils-COapXD-H.js";import"./MeshLocalVertexSpace-C6_0cPvl.js";import"./vec3-BG8y5Bfo.js";import"./projection-BRJpaiCC.js";import"./DoubleArray-BynHHisJ.js";import"./BufferView-RwRq3-rD.js";import"./vec4-B0GAUmo-.js";async function S(t,r,m){await Promise.resolve(),p(m);const o=c(t,r);if(!o)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const e=t.cloneAndModifyVertexAttributes(new n({...o,uv:i(t.vertexAttributes.uv),color:i(t.vertexAttributes.color)}),r);return e.transform=null,e}export{S as convertMeshVertexSpace};
