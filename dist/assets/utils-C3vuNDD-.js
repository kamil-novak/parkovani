import{dG as C,bS as j,ah as z,dH as L,dI as O,dJ as E,dK as V,dL as A,G as D,dM as P,dN as R}from"./index-i1xHX9d5.js";import{$ as S}from"./utils-CA7p_e2p.js";import{m as T,B as U}from"./utils-7hKZ6ZBe.js";let c=null;const Y=/^(?<hh>([0-1][0-9])|([2][0-3])):(?<mm>[0-5][0-9])(:(?<ss>[0-5][0-9]))?([.](?<ms>\d+))?$/;function _(t,e,o){return t.x<0?t.x+=e:t.x>o&&(t.x-=e),t}function Z(t,e,o,s){const a=C(o)?j(o):null,m=a?Math.round((a.valid[1]-a.valid[0])/e.scale[0]):null;return t.map(i=>{const r=new z(i.geometry);return L(e,r,r),i.geometry=a?_(r,m??0,s[0]):r,i})}function k(t,e=18,o,s,a){const m=new Float64Array(s*a);e=Math.round(P(e));let i=Number.POSITIVE_INFINITY,r=Number.NEGATIVE_INFINITY;const N=R(o);for(const{geometry:h,attributes:g}of t){const{x,y:u}=h,I=Math.max(0,x-e),M=Math.max(0,u-e),F=Math.min(a,u+e),b=Math.min(s,x+e),$=+N(g);for(let f=M;f<F;f++)for(let d=I;d<b;d++){const w=f*s+d,y=O(d-x,f-u,e)*$,l=m[w]+=y;i=Math.min(i,l),r=Math.max(r,l)}}return{min:i,max:r}}function B(t){const e=Y.exec(t);if(!e)return null;const{hh:o,mm:s,ss:a,ms:m}=e.groups;return Number(o)*E.hours+Number(s)*E.minutes+Number(a)*E.seconds+Number(m||0)}async function q(t,e,o=!0){if(!e)return[];const{field:s,field2:a,field3:m,fieldDelimiter:i,fieldInfos:r,timeZone:N}=t,h=s&&(r==null?void 0:r.find(l=>l.name.toLowerCase()===s.toLowerCase())),g=!!h&&V(h),x=!!h&&S(h),u=t.valueExpression,I=t.normalizationType,M=t.normalizationField,F=t.normalizationTotal,b=[],$=t.viewInfoParams;let f=null,d=null;if(u){if(!c){const{arcadeUtils:l}=await A();c=l}c.hasGeometryOperations(u)&&await c.enableGeometryOperations(),f=c.createFunction(u),d=$?c.getViewInfo({viewingMode:$.viewingMode,scale:$.scale,spatialReference:new D($.spatialReference)}):null}const w=t.fieldInfos,y=!(e[0]&&"declaredClass"in e[0]&&e[0].declaredClass==="esri.Graphic")&&w?{fields:w}:null;return e.forEach(l=>{const p=l.attributes;let n;if(u){const v=y?{...l,layer:y}:l,G=c.createExecContext(v,d,N);n=c.executeFunction(f,G)}else p&&(n=p[s],a?(n=`${T(n)}${i}${T(p[a])}`,m&&(n=`${n}${i}${T(p[m])}`)):typeof n=="string"&&o&&(x?n=n?new Date(n).getTime():null:g&&(n=n?B(n):null)));if(I&&typeof n=="number"&&isFinite(n)){const v=p&&parseFloat(p[M]);n=U(n,I,v,F)}b.push(n)}),b}export{B as I,q as b,k as w,Z as x};
