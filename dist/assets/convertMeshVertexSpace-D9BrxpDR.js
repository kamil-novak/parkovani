import{aB as p,s as m,aG as s}from"./index-ZNyjz3YK.js";import{p as a}from"./MeshVertexAttributes-CjHzRBOu.js";import{B as n}from"./vertexSpaceConversion-0DYmGp4w.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-B_FVZrSH.js";import"./computeTranslationToOriginAndRotation-BW78r3m1.js";import"./projectPointToVector--ab4wrkY.js";import"./meshVertexSpaceUtils-CCBmMDYc.js";import"./MeshLocalVertexSpace-DPGN4cSG.js";import"./vec3-B5JTUzpT.js";import"./BufferView-Cv2xrARM.js";import"./vec4-AYMjioNF.js";async function B(t,o,r){await Promise.resolve(),p(r);const e=n(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{B as convertMeshVertexSpace};
